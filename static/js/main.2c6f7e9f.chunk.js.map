{"version":3,"sources":["logo.svg","components/Pipeline_viz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","D3Chart","svg","d3","inner","select","zoom","translate","scale","size","scaleExtent","on","zoomed","attr","call","event","target","direction","target_zoom","translate0","l","center","width","height","extent","view","x","y","k","preventDefault","this","id","duration","tween","iTranslate","iScale","t","interpolateZoom","g","dagreD3","graphlib","Graph","setGraph","rankdir","setDefaultEdgeLabel","setNode","label","class","nodes","forEach","v","node","rx","ry","setEdge","render","_height","graph","console","log","className","React","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c6f7e9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport * as d3 from 'd3'\r\nimport dagreD3 from 'dagre-d3'\r\n\r\n// Working code\r\n\r\nexport default class D3Chart extends React.Component {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\nvar width = 960,\r\n    height = 400,\r\n    center = [width / 2, height / 2];\r\n//\r\nvar svg = d3.select('svg'),\r\n    inner = svg.select('g');\r\n//\r\n\r\nvar zoom = d3.behavior.zoom()\r\n.translate([0, 0])\r\n.scale(1)\r\n.size([900, 400])\r\n.scaleExtent([1, 8])\r\n.on('zoom', zoomed);\r\n//\r\nsvg\r\n   .call(zoom) // delete this line to disable free zooming\r\n   .call(zoom.event);\r\n\r\nfunction zoomed() {\r\n   inner.attr('transform', 'translate(' + zoom.translate() + ')scale(' + zoom.scale() + ')');\r\n}\r\n\r\nfunction interpolateZoom(translate, scale) {\r\n   var self = this;\r\n   return d3.transition().duration(350).tween('zoom', function () {\r\n      var iTranslate = d3.interpolate(zoom.translate(), translate),\r\n          iScale = d3.interpolate(zoom.scale(), scale);\r\n      return function (t) {\r\n         zoom\r\n            .scale(iScale(t))\r\n            .translate(iTranslate(t));\r\n         zoomed();\r\n      };\r\n   });\r\n}\r\n\r\nfunction zoomClick() {\r\n   var clicked = d3.event.target,\r\n       direction = 1,\r\n       factor = 0.2,\r\n       target_zoom = 1,\r\n       center = [width / 2, height / 2],\r\n       extent = zoom.scaleExtent(),\r\n       translate = zoom.translate(),\r\n       translate0 = [],\r\n       l = [],\r\n       view = {\r\n          x: translate[0],\r\n          y: translate[1],\r\n          k: zoom.scale()\r\n       };\r\n\r\n   d3.event.preventDefault();\r\n   direction = (this.id === 'zoom_in') ? 1 : -1;\r\n   target_zoom = zoom.scale() * (1 + factor * direction);\r\n\r\n   if (target_zoom < extent[0] || target_zoom > extent[1]) {\r\n      return false;\r\n   }\r\n\r\n   translate0 = [(center[0] - view.x) / view.k, (center[1] - view.y) / view.k];\r\n   view.k = target_zoom;\r\n   l = [translate0[0] * view.k + view.x, translate0[1] * view.k + view.y];\r\n\r\n   view.x += center[0] - l[0];\r\n   view.y += center[1] - l[1];\r\n\r\n   interpolateZoom([view.x, view.y], view.k);\r\n}\r\n\r\nd3.selectAll('button').on('click', zoomClick);\r\n//\r\n//\r\n//\r\n//  tcp-state-diagram EXAMPLE\r\n//\r\n// Create a new directed graph\r\nvar g = new dagreD3.graphlib.Graph()\r\n  .setGraph({rankdir :\"LR\"})\r\n  .setDefaultEdgeLabel(function() { return {}; });\r\n\r\n// Here we\"re setting nodeclass, which is used by our custom drawNodes function\r\n// below.\r\ng.setNode(0,  { label: \"TOP\",       class: \"type-TOP\" });\r\ng.setNode(1,  { label: \"S\",         class: \"type-S\" });\r\ng.setNode(2,  { label: \"NP\",        class: \"type-NP\" });\r\ng.setNode(3,  { label: \"DT\",        class: \"type-DT\" });\r\ng.setNode(4,  { label: \"This\",      class: \"type-TK\" });\r\ng.setNode(5,  { label: \"VP\",        class: \"type-VP\" });\r\ng.setNode(6,  { label: \"VBZ\",       class: \"type-VBZ\" });\r\ng.setNode(7,  { label: \"is\",        class: \"type-TK\" });\r\ng.setNode(8,  { label: \"NP\",        class: \"type-NP\" });\r\ng.setNode(9,  { label: \"DT\",        class: \"type-DT\" });\r\ng.setNode(10, { label: \"an\",        class: \"type-TK\" });\r\ng.setNode(11, { label: \"NN\",        class: \"type-NN\" });\r\ng.setNode(12, { label: \"example\",   class: \"type-TK\" });\r\ng.setNode(13, { label: \".\",         class: \"type-.\" });\r\ng.setNode(14, { label: \"sentence\",  class: \"type-TK\" });\r\n\r\ng.nodes().forEach(function(v) {\r\n  var node = g.node(v);\r\n  // Round the corners of the nodes\r\n  node.rx = node.ry = 5;\r\n});\r\n\r\n// Set up edges, no special attributes.\r\ng.setEdge(3, 4);\r\ng.setEdge(2, 3);\r\ng.setEdge(1, 2);\r\ng.setEdge(6, 7);\r\ng.setEdge(5, 6);\r\ng.setEdge(9, 10);\r\ng.setEdge(8, 9);\r\ng.setEdge(11,12);\r\ng.setEdge(8, 11);\r\ng.setEdge(5, 8);\r\ng.setEdge(1, 5);\r\ng.setEdge(13,14);\r\ng.setEdge(1, 13);\r\ng.setEdge(0, 1)\r\n\r\n// Create the renderer\r\nvar render = new dagreD3.render();\r\n\r\n// Run the renderer. This is what draws the final graph.\r\nrender(inner, g);\r\n\r\n// Center the graph\r\nvar initialScale = 0.75;\r\nvar _height = svg.attr('height') - g.graph().height;\r\nvar _width = svg.attr('width') - g.graph().width;\r\nconsole.log(height / _height);\r\n\r\nzoom.translate([(svg.attr('width') - g.graph().width * initialScale) / 2, 10]).scale(1).event(svg);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n      return (\r\n      <div className =\"harry-pipeline\">\r\n        <div className =\"pipeline-wrapper\">\r\n        <svg id=\"nodeTree\" width=\"1425\" height=\"700\" >\r\n        <g>  </g>\r\n        </svg>\r\n        </div>\r\n        </div>\r\n        )\r\n    };\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Pipeline from './components/Pipeline_viz'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n<div class=\"header\">\n  <a href=\"#default\" class=\"logo\">Ninja Pipeline Visualizer</a>\n  <div class=\"header-right\">\n    <a class=\"active\" href=\"/\">Home</a>\n    <a href=\"https://google.com\">Contact</a>\n    <a href=\"/aboutus\">About</a>\n  </div>\n</div>\n   <Pipeline />\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}