{"version":3,"sources":["logo.svg","components/Pipeline_viz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","D3Chart","svg","d3","inner","select","zoom","translate","scale","size","scaleExtent","on","zoomed","attr","call","event","target","direction","target_zoom","translate0","l","center","width","height","extent","view","x","y","k","preventDefault","this","id","duration","tween","iTranslate","iScale","t","interpolateZoom","g","dagreD3","graphlib","Graph","setGraph","rankdir","setDefaultEdgeLabel","props","node_information","forEach","state","setNode","labelType","label","style","node_relations","node_relation","i","length","setEdge","nodes","v","node","rx","ry","render","_height","graph","console","log","className","React","Component","App","class","href","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b363956.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport * as d3 from 'd3'\r\nimport dagreD3 from 'dagre-d3'\r\n\r\nexport default class D3Chart extends React.Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        var width = 960,\r\n            height = 400,\r\n            center = [width / 2, height / 2];\r\n        //\r\n        var svg = d3.select('svg'),\r\n            inner = svg.select('g');\r\n        //\r\n\r\n        var zoom = d3.behavior.zoom()\r\n            .translate([0, 0])\r\n            .scale(1)\r\n            .size([900, 400])\r\n            .scaleExtent([1, 8])\r\n            .on('zoom', zoomed);\r\n        //\r\n        svg\r\n            .call(zoom) // delete this line to disable free zooming\r\n            .call(zoom.event);\r\n\r\n        function zoomed() {\r\n            inner.attr('transform', 'translate(' + zoom.translate() + ')scale(' + zoom.scale() + ')');\r\n        }\r\n\r\n        function interpolateZoom(translate, scale) {\r\n            var self = this;\r\n            return d3.transition().duration(350).tween('zoom', function() {\r\n                var iTranslate = d3.interpolate(zoom.translate(), translate),\r\n                    iScale = d3.interpolate(zoom.scale(), scale);\r\n                return function(t) {\r\n                    zoom\r\n                        .scale(iScale(t))\r\n                        .translate(iTranslate(t));\r\n                    zoomed();\r\n                };\r\n            });\r\n        }\r\n\r\n        function zoomClick() {\r\n            var clicked = d3.event.target,\r\n                direction = 1,\r\n                factor = 0.2,\r\n                target_zoom = 1,\r\n                center = [width / 2, height / 2],\r\n                extent = zoom.scaleExtent(),\r\n                translate = zoom.translate(),\r\n                translate0 = [],\r\n                l = [],\r\n                view = {\r\n                    x: translate[0],\r\n                    y: translate[1],\r\n                    k: zoom.scale()\r\n                };\r\n\r\n            d3.event.preventDefault();\r\n            direction = (this.id === 'zoom_in') ? 1 : -1;\r\n            target_zoom = zoom.scale() * (1 + factor * direction);\r\n\r\n            if (target_zoom < extent[0] || target_zoom > extent[1]) {\r\n                return false;\r\n            }\r\n\r\n            translate0 = [(center[0] - view.x) / view.k, (center[1] - view.y) / view.k];\r\n            view.k = target_zoom;\r\n            l = [translate0[0] * view.k + view.x, translate0[1] * view.k + view.y];\r\n\r\n            view.x += center[0] - l[0];\r\n            view.y += center[1] - l[1];\r\n\r\n            interpolateZoom([view.x, view.y], view.k);\r\n        }\r\n\r\n        d3.selectAll('button').on('click', zoomClick);\r\n\r\n        // Create a new directed graph\r\n        var g = new dagreD3.graphlib.Graph()\r\n            .setGraph({\r\n                rankdir: \"LR\"\r\n            })\r\n            .setDefaultEdgeLabel(function() {\r\n                return {};\r\n            });\r\n\r\n        var node_info = (this.props.node_information)\r\n\r\n        node_info.forEach(function(state) {\r\n\r\n            if (state[\"NodeUrl\"]) {\r\n\r\n                g.setNode(state[\"NodeID\"], {\r\n                    labelType: \"html\",\r\n                    label: \"<a href=\" + state[\"NodeUrl\"] + \">\" + state[\"NodeName\"] + \"</a>\",\r\n                    style: \"fill: \" + state[\"NodeColor\"]\r\n\r\n                });\r\n\r\n            } else {\r\n\r\n                g.setNode(state[\"NodeID\"], {\r\n                    labelType: \"html\",\r\n                    label: state[\"NodeName\"],\r\n                    style: \"fill: \" + state[\"NodeColor\"]\r\n                });\r\n            }\r\n        });\r\n\r\n        var node_relations = (this.props.node_relation)\r\n        // Set up the edges\r\n        for (var i = 0; i < node_relations.length; i++) {\r\n            g.setEdge(node_relations[i][0], node_relations[i][1], {\r\n\r\n            });\r\n        }\r\n        // giving shape to the box\r\n        g.nodes().forEach(function(v) {\r\n            var node = g.node(v);\r\n            // Round the corners of the nodes\r\n            node.rx = node.ry = 5;\r\n        });\r\n\r\n        // Create the renderer\r\n        var render = new dagreD3.render();\r\n        // Run the renderer. This is what draws the final graph.\r\n        render(inner, g);\r\n\r\n        // Center the graph\r\n        var initialScale = 0.75;\r\n        var _height = svg.attr('height') - g.graph().height;\r\n        var _width = svg.attr('width') - g.graph().width;\r\n        console.log(height / _height);\r\n        zoom.translate([(svg.attr('width') - g.graph().width * initialScale) / 2, 10]).scale(1).event(svg);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return ( <\r\n            div className = \"harry-pipeline\" >\r\n            <\r\n            div className = \"pipeline-wrapper\" >\r\n            <\r\n            svg id = \"nodeTree\"\r\n            width = \"1425\"\r\n            height = \"700\" >\r\n            <\r\n            g > < /g> <\r\n            /svg> <\r\n            /div> <\r\n            /div>\r\n        )\r\n    };\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Pipeline from './components/Pipeline_viz'\n\nfunction App() {\n\n    var node_info = [{\n            'NodeID': 'T1',\n            'NodeName': 'Table 1',\n            'NodeUrl': 'https://www.table1.com',\n            'NodeColor': 'mediumseagreen'\n        },\n        {\n            'NodeID': 'T2',\n            'NodeName': 'Table 2'\n        },\n        {\n            'NodeID': 'T3',\n            'NodeName': 'Table 3',\n            'NodeUrl': 'https://table3.com',\n            'NodeColor': 'lightgreen'\n        },\n        {\n            'NodeID': 'T4',\n            'NodeName': 'Table 4',\n            'NodeUrl': 'https://table4.com',\n            'NodeColor': 'lightgreen'\n        },\n        {\n            'NodeID': 'T5',\n            'NodeName': 'Scoop Job',\n            'NodeUrl': 'https://Scoop.com',\n            'NodeColor': 'lightgreen'\n        },\n        {\n            'NodeID': 'T6',\n            'NodeName': 'Spark Job',\n            'NodeUrl': 'https://Spark.com',\n            'NodeColor': 'lightgreen'\n        },\n        {\n            'NodeID': 'T7',\n            'NodeName': 'Load S3',\n            'NodeUrl': 'https://s3.com',\n            'NodeColor': 'yellow'\n        }\n    ];\n\n\n    var node_rel = [\n        [\"T1\", \"T2\"],\n        [\"T2\", \"T3\"],\n        [\"T3\", \"T4\"],\n        [\"T3\", \"T5\"],\n        [\"T5\", \"T6\"],\n        [\"T6\", \"T7\"]\n    ];\n\n    return ( <\n        div className = \"App\" >\n        <\n        div class = \"header\" >\n        <\n        a href = \"#default\"\n        class = \"logo\" > Ninja Pipeline Visualizer < /a> <\n        div class = \"header-right\" >\n        <\n        a class = \"active\"\n        href = \"/\" > Home < /a> <\n        a href = \"https://google.com\" > Contact < /a> <\n        a href = \"/aboutus\" > About < /a> <\n        /div> <\n        /div> <\n        Pipeline node node_relation = {\n            node_rel\n        }\n        node_information = {\n            node_info\n        }\n        />\n\n        <\n        /div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}